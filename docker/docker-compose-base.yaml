# Using version 2 of docker compose
version: "2"

services:
  orderer-base:
    image: hyperledger/fabric-orderer:$IMAGE_TAG
    command: orderer
    environment:
      # The location of our orderer.yaml file is in the /fabric-network local folder, which is binded to /var/hyperledger/orderer/config container folder
      - FABRIC_CFG_PATH=/var/hyperledger/config
      - FABRIC_LOGGING_SPEC=INFO
      - ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/msp
      # Directory to store blocks in
      - ORDERER_FILELEDGER_LOCATION=/var/hyperledger/production
      # Local address orderer listens on
      - ORDERER_GENERAL_LISTENADDRESS=0.0.0.0
      # Port that orderer listens on
      - ORDERER_GENERAL_LISTENPORT=7050
      # Method to obtain the genesis block
      - ORDERER_GENERAL_BOOTSTRAPMETHOD=file
      # Path to the genesis block
      - ORDERER_GENERAL_BOOTSTRAPFILE=/var/hyperledger/config/channel-artifacts/genesis.block
      - ORDERER_GENERAL_TLS_ENABLED=false
      - ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/tls/server.key
      - ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/tls/server.crt
      - ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/tls/ca.crt]
      - ORDERER_DEBUG_BROADCASTTRACEDIR=/var/hyperledger/logs/broadcast
      - ORDERER_DEBUG_DELIVERTRACEDIR=/var/hyperledger/logs/deliver
    volumes:
      # Set our /fabric-network local folder to be located at /var/hyperledger/config folder in the container
      - ${PROJECT_ROOT_FOLDER}:/var/hyperledger/config
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric
    networks:
      - bank-network

  peer-base:
    image: hyperledger/fabric-peer:${IMAGE_TAG}
    # The command the container executes when it is launched
    command: peer node start
    # Set all the common environment variables for our peers
    environment:
      # The location of our core.yaml file is in the /fabric-network local folder, which is binded to /var/hyperledger/config container folder
      - FABRIC_CFG_PATH=/var/hyperledger/config
      # Set the overlay network used by our containers. So the chaincode container can communicate with the peer containers
      # Docker network names follow the format: <COMPOSE_PROJECT_NAME>_<NETWORK_NAME>
      - CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=${COMPOSE_PROJECT_NAME}_bank-network
      - FABRIC_LOGGING_SPEC=INFO
      # Path to the MSP folder
      - CORE_PEER_MSPCONFIGPATH=/var/hyperledger/msp
      # The location of our peer ledger
      - CORE_PEER_FILESYSTEMPATH=/var/hyperledger/production
      # (Private) Address at local network interface that this peer listens on (I.e the port the peer listens on for inbound connections)
      - CORE_PEER_LISTENADDRESS=0.0.0.0:7051
      # (Private) Address the peer uses to listen for inbound chaincode connections (I.e the port the peer listens on for inbound chaincode connections)
      - CORE_PEER_CHAINCODELISTENADDRESS=0.0.0.0:7052
      # Enable TLS on a peer node
      # - CORE_PEER_TLS_ENABLED=true
      - CORE_PEER_TLS_ENABLED=false
      # Endpoint of the VM management system
      - CORE_PEER_TLS_CERT_FILE=/var/hyperledger/tls/server.crt
      - CORE_PEER_TLS_KEY_FILE=/var/hyperledger/tls/server.key
      - CORE_PEER_TLS_ROOTCERT_FILE=/var/hyperledger/tls/ca.crt 
      - CORE_VM_ENDPOINT=unix://host/var/run/docker.sock
    volumes:
      # Set our /fabric-network local folder to be located at /var/hyperledger/config folder in the container
      - ${PROJECT_ROOT_FOLDER}:/var/hyperledger/config
      # This mapping will allow communicate with the docker daemon from within a container
      - /var/run:/host/var/run
    # The directory where all RUN, CMD, ENTRYPOINT, COPY and ADD instructions are run from
    working_dir: /opt/gopath/src/github.com/hyperledger/fabric/peer
    networks:
      - bank-network